toastr.options = {
    "closeButton": false,
    "debug": false,
    "newestOnTop": false,
    "progressBar": false,
    "positionClass": "toast-bottom-right",
    "preventDuplicates": false,
    "onclick": null,
    "showDuration": "300",
    "hideDuration": "1000",
    "timeOut": "5000",
    "extendedTimeOut": "1000",
    "showEasing": "swing",
    "hideEasing": "linear",
    "showMethod": "fadeIn",
    "hideMethod": "fadeOut"
};
function group_by(xs, key) {
    return xs.reduce(function(rv, x) {
        (rv[x[key]] = rv[x[key]] || []).push(x);
        return rv;
    }, {});
}
function number_format(number, decimals, decPoint, thousandsSep) {
    number = (number + '').replace(/[^0-9+\-Ee.]/g, '')
    var n = !isFinite(+number) ? 0 : +number
    var prec = !isFinite(+decimals) ? 0 : Math.abs(decimals)
    var sep = (typeof thousandsSep === 'undefined') ? ',' : thousandsSep
    var dec = (typeof decPoint === 'undefined') ? '.' : decPoint
    var s = ''

    var toFixedFix = function (n, prec) {
        if (('' + n).indexOf('e') === -1) {
        return +(Math.round(n + 'e+' + prec) + 'e-' + prec)
        } else {
        var arr = ('' + n).split('e')
        var sig = ''
        if (+arr[1] + prec > 0) {
            sig = '+'
        }
        return (+(Math.round(+arr[0] + 'e' + sig + (+arr[1] + prec)) + 'e-' + prec)).toFixed(prec)
        }
    }

    s = (prec ? toFixedFix(n, prec).toString() : '' + Math.round(n)).split('.')
    if (s[0].length > 3) {
        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep)
    }
    if ((s[1] || '').length < prec) {
        s[1] = s[1] || ''
        s[1] += new Array(prec - s[1].length + 1).join('0')
    }

    return s.join(dec)
}
function formatSize(size) {
    if(size == 0) {
        return "Unknown";
    } else {
        var i = Math.floor(Math.log(size) / Math.log(1024));
        return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i];
    }
}
function goBack() {
    window.history.back();
}
function getParams(name,url) {
    if (!url) url = location.href;
    name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
    var regexS = "[\\?&]"+name+"=([^&#]*)";
    var regex = new RegExp(regexS);
    var results = regex.exec(url);
    return results == null ? "" : results[1];
}
function get_driveid(url) {
    let id = "";
    try {
        let parts = url.split(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/);
        if (url.indexOf('?id=') >= 0) {
            id = (parts[6].split("=")[1]).replace("&usp","");
            return id;
        } else {
            id = parts[5].split("/");
            //Using sort to get the id as it is the longest element.
            let sortArr = id.sort(function(a,b){return b.length - a.length});
            id = sortArr[0];
            return id;
        }
    } catch(ex) {
        return "";
    }
}
async function addVideo(action, url) {
    return new Promise((resolve, reject) => {
        $.ajax({
            type: "POST",
            url: action,
            data: `url=${url}`,
            success: function(data) {
                if(data.status == 1) {
                    toastr.success(data.msg);
                    resolve("OK");
                } else {
                    toastr.error(data.msg);
                    reject("Error");
                }
            }
        });
    })
}
const addMulti = (action, row) => {
    return new Promise((resolve, reject) => {
        let data = "";
        let info = row.split("|");
        let keys = ["key", "url", "port"];
        for(let i=0;i<info.length;i++) {
            data+= `${keys[i]}=${info[i]}&`;
        }
        $.ajax({
            type: "POST",
            url: action,
            data,
            success: function(data) {
                if(data.status == 1) {
                    toastr.success(`${data.msg}`);
                    resolve();
                } else {
                    toastr.error(`${data.msg}`);
                    reject();
                }
            }
        });
    })
}
$(document).on("submit", ".frmMulti", async function(e) {
    e.preventDefault();
    const action = $(this).attr("action");
    const list = $("#list").val().split("\n");
    let stt = 0;
    for(const row of list) {
        if(row) {
            await addMulti(action, row).then(() => {
                stt++;
            }).catch(() => false);
        }
    }
    toastr.success(`Added ${stt} row`);
});
$(document).on("click", "#btn-refresh-video", function() {
    let type = $(this).attr("data-type");
    Swal.fire({
        title: 'Are you sure?',
        text: `Bạn sẽ refresh trạng thái ${type} video!`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, refresh it!'
    }).then(function (result) {
        if (result.value) {
            $.ajax({
                type: "POST",
                url: `/${dashboard}/refresh/`,
                data: `type=${type}`,
                success: function(data) {
                    if(data.status == 1) {
                        swal.fire(
                            'Deleted!',
                            data.msg,
                            'success'
                        );
                    } else {
                        swal.fire(
                            'Error!',
                            data.msg,
                            'error'
                        );
                    }
                }
            });
        }
    });
})
$(document).on("click", ".btn-check", function() {
    let email = $(this).attr("data-email");
    $.ajax({
        type: "POST",
        url: `/${dashboard}/google/check`,
        data: `email=${email}`,
        success: function(data) {
            if(data.status == 1) {
                toastr.success(data.msg);
                $('.datatable').KTDatatable('reload');
            }
            else toastr.error(data.msg);
        }
    });
});
$(".frmAccount").submit(function(e) {
    e.preventDefault();
    var url = $(this).attr("action");
    $.ajax({
        type: "POST",
        url: url,
        data: $(this).serialize(),
        success: function(data) {
            if(data.status == 1) {
                console.log(data);
            }
            else toastr.error(data.msg);
        }
    });
});
$("#frmAction").submit(function(e) {
    e.preventDefault();
    $(this).find(":submit").attr("disabled", true);
    var url = $(this).attr("action");
    $.ajax({
        type: "POST",
        url: url,
        data: $(this).serialize(),
        success: function(data) {
            $(this).find(":submit").attr("disabled", false);
            if(data.status == 1) {
                toastr.success(data.msg);
                setTimeout(() => {
                    location.assign(data.redirect);
                }, 2000);
            }
            else toastr.error(data.msg);
        }
    });
});
$(document).on("submit", ".frmAuth", function(e) {
    e.preventDefault();
    var url = $(this).attr("action");
    $.ajax({
        type: "POST",
        url: url,
        data: $(this).serialize(),
        success: function(data) {
            if(data.status == 1) {
                toastr.success(data.msg);
                setTimeout(() => {
                    location.reload();
                }, 1500);
            }
            else {
                try {
                    grecaptcha.reset();
                } catch(ex) {

                }
                toastr.error(data.msg);
            }
        }
    });
});
$(".frmModal").submit(function(e) {
    e.preventDefault();
    var url = $(this).attr("action");
    $.ajax({
        type: "POST",
        url: url,
        data: $(this).serialize(),
        success: function(data) {
            if(data.status == 1) {
                toastr.success(data.msg);
                $("#kt_modal_add").modal("hide");
                $("#kt_modal_edit").modal("hide");
                $(".frmModal").trigger("reset");
                setTimeout(function(){
                    $('.datatable').KTDatatable('reload');
                }, 100);
            }
            else toastr.error(data.msg);
        }
    });
});
$("#frmImage").submit(function(e) {
    e.preventDefault();
    $(this).find(":submit").attr("disabled", true);
    var url = $(this).attr("action");
    var formData = new FormData(this);
    $.ajax({
        type: "POST",
        url: url,
        data: formData,
        contentType: false,
        cache: false,
        processData:false,
        success: function(data) {
            $(this).find(":submit").attr("disabled", false);
            if(data.status == 1) {
                toastr.success(data.msg);
                setTimeout(function(){
                    window.location.assign(data.redirect);
                }, 2000);
            } else {
                toastr.error(data.msg);
            }
        }
    });
});
$(document).on("click", ".btn-edit", function() {
    var id = $(this).attr("data-id");
    var type = $(this).attr("data-type");
    var url = `/${dashboard}/${type}/info/`;
    $.ajax({
        type: "GET",
        url: url,
        data: `id=${id}`,
        success: function(data) {
            if(data.status == 1) {
                var result = Object.keys(data.data).map(function(key) {
                    return [key, data.data[key]];
                });
                for(var i=0;i<result.length;i++) {
                    let item = result[i];
                    if(item[0] == "status" || item[0] == "active" || item[0] == "ugroup") {
                        $(`#kt_modal_edit #${item[0]}`).val(item[1]).trigger('change');
                    } else {
                        if(item[0] == "drive") {
                            $(`#kt_modal_edit #${item[0]}`).val(`https://drive.google.com/file/d/${item[1]}/view`);
                        } else if(item[0] == "lotus") {
                            if(item[1] != "0" && item[1] != "") $(`#kt_modal_edit #${item[0]}`).val(item[1]);
                        } else {
                            $(`#kt_modal_edit #${item[0]}`).val(item[1]);
                        }
                    }
                }
                $("#kt_modal_edit").modal("show");
            }
            else toastr.error(data.msg);
        }
    });
});
$(document).on("click", ".btn-view", function() {
    var id = $(this).attr("data-id");
    var url = `/${dashboard}/cache/info/`;
    $.ajax({
        type: "GET",
        url: url,
        data: `id=${id}`,
        success: function(data) {
            if(data.status == 1) {
                $(`#kt_modal_view #content`).val(data.data);
                $("#kt_modal_view").modal("show");
            }
            else toastr.error(data.msg);
        }
    });
});
$(document).on("click", ".btn-status", function() {
    let type = $(this).attr("data-type");
    let id = $(this).attr("data-id");
    let status = $(this).attr("data-status");
    $.ajax({
        type: "POST",
        url: `/${dashboard}/film/status/`,
        data: `id=${id}&type=${type}&status=${status}`,
        success: function(data) {
            if(data.status === 1) {
                if(data.data === true) {
                    $(`#${type}-${id}`).addClass("active");
                } else {
                    $(`#${type}-${id}`).removeClass("active");
                }
                $(`#${type}-${id}`).attr("data-status", data.data);
                toastr.success(data.msg);
            } else toastr.error(data.msg);
        }
    });
});
$(document).on("click", ".btn-status-comic", function() {
    let type = $(this).attr("data-type");
    let id = $(this).attr("data-id");
    let status = $(this).attr("data-status");
    $.ajax({
        type: "POST",
        url: `/${dashboard}/comic/status/`,
        data: `id=${id}&type=${type}&status=${status}`,
        success: function(data) {
            if(data.status === 1) {
                if(data.data === true) {
                    $(`#${type}-${id}`).addClass("active");
                } else {
                    $(`#${type}-${id}`).removeClass("active");
                }
                $(`#${type}-${id}`).attr("data-status", data.data);
                toastr.success(data.msg);
            } else toastr.error(data.msg);
        }
    });
});
$(document).on("click", ".btn-refresh", function() {
    let type = $(this).attr("data-type");
    Swal.fire({
        title: 'Are you sure?',
        text: `Refresh ${type} task`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, refresh it!'
    }).then(async function (result) {
        if (result.value) {
            var url = `/${dashboard}/task/refresh/`;
            $.ajax({
                type: "POST",
                url: url,
                data: `type=${type}`,
                success: function(data) {
                    if(data.status == 1) {
                        Swal.fire(
                            'Deleted!',
                            `Đã refresh ${type} thành công.`,
                            'success'
                        )
                        $('.datatable').KTDatatable('reload');
                    }
                    else toastr.error(data.msg);
                }
            });
        }
    });
});
$(document).on("click", ".btn-delete", function() {
    let type = $(this).attr("data-type");
    let id = $(this).attr("data-id");
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!'
    }).then(async function (result) {
        if (result.value) {
            var url = `/${dashboard}/${type}/delete/`;
            $.ajax({
                type: "POST",
                url: url,
                data: `id=${id}`,
                success: function(data) {
                    if(data.status == 1) {
                        Swal.fire(
                            'Deleted!',
                            `Đã xóa ${type} thành công.`,
                            'success'
                        )
                        $('.datatable').KTDatatable('reload');
                    }
                    else toastr.error(data.msg);
                }
            });
        }
    });
});
$(document).on("click", ".btn-delete-episode", function() {
    let filmid = $(this).attr("data-filmid");
    let id = $(this).attr("data-id");
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!'
    }).then(async function (result) {
        if (result.value) {
            var url = `/${dashboard}/film/episode/${filmid}/delete/`;
            $.ajax({
                type: "POST",
                url: url,
                data: `id=${id}`,
                success: function(data) {
                    if(data.status == 1) {
                        Swal.fire(
                            'Deleted!',
                            'Bạn đã xóa tập thành công.',
                            'success'
                        )
                        $('.datatable').KTDatatable('reload');
                    }
                    else toastr.error(data.msg);
                }
            });
        }
    });
});
$(document).on("click", ".btn-clear", function() {
    Swal.fire({
        title: 'Are you sure?',
        text: "Bạn sẽ clear toàn bộ cache!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!'
    }).then(async function (result) {
        if (result.value) {
            var url = `/${dashboard}/cache/clear/`;
            $.ajax({
                type: "POST",
                url: url,
                success: function(data) {
                    if(data.status == 1) {
                        Swal.fire(
                            'Deleted!',
                            `Clear cache thành công.`,
                            'success'
                        )
                        $('.datatable').KTDatatable('reload');
                    }
                    else toastr.error(data.msg);
                }
            });
        }
    });
});
$(document).on("click", ".btn-refresh-ip", function() {
    Swal.fire({
        title: 'Are you sure?',
        text: `Refresh used proxy`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, refresh it!'
    }).then(async function (result) {
        if (result.value) {
            var url = `/${dashboard}/proxy/refresh/`;
            $.ajax({
                type: "POST",
                url: url,
                success: function(data) {
                    if(data.status == 1) {
                        Swal.fire(
                            'Deleted!',
                            `Đã used proxy thành công.`,
                            'success'
                        )
                        $('.datatable').KTDatatable('reload');
                    }
                    else toastr.error(data.msg);
                }
            });
        }
    });
});
const Renew = (id) => {
    return new Promise((resolve, reject) => {
        $.ajax({
            type: "POST",
            url: `/${dashboard}/proxy/renew/`,
            data: `key=${id}`,
            success: function(data) {
                if(data.status == 1) {
                    toastr.success(data.msg);
                    resolve("OK");
                } else {
                    toastr.error(data.msg);
                    resolve("Error");
                }
            }
        });
    })
}
$(document).on("click", ".btn-renew", function() {
    Swal.fire({
        title: 'Are you sure?',
        text: "Bạn sẽ đổi tất cả ip!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes!'
    }).then(async function (result) {
        if (result.value) {
            const list = $(".btn-renew-ip");
            for(const item of list) {
                let id = $(item).attr("data-id");
                await Renew(id);
            }
            $('.datatable').KTDatatable('reload');
        }
    });
});
$(document).on("click", ".btn-renew-ip", function() {
    const id = $(this).attr("data-id");
    Swal.fire({
        title: 'Are you sure?',
        text: "Bạn sẽ đổi ip của proxy này!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes!'
    }).then(async function (result) {
        if (result.value) {
            $.ajax({
                type: "POST",
                url: `/${dashboard}/proxy/renew/`,
                data: `key=${id}`,
                success: function(data) {
                    if(data.status == 1) {
                        Swal.fire(
                            'Success!',
                            'Bạn đã đổi ip thành công.',
                            'success'
                        )
                        $('.datatable').KTDatatable('reload');
                    }
                    else toastr.error(data.msg);
                }
            });
        }
    });
});